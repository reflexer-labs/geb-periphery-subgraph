# --- ERC20 ---
type ERC20 @entity {
  "<token address>"
  id: ID!

  " Token address"
  address: Bytes!

  "Full name of the token"
  name: String!

  " Ticker nanme "
  symbol: String!

  " Total supply of the token in circulation "
  totalSupply: BigDecimal!

  " Number of decimal of the token "
  decimals: BigInt!
}

type ERC20Balance @entity {
  "<tokenAddress>-<address>"
  id: ID!

  " Address of the ERC20 token "
  tokenAddress: Bytes!

  " Address of the owner that has the balance "
  address: Bytes!

  " Balance amount "
  balance: BigDecimal!

  " List of spend allowances (addresses that can spend the balance) "
  approvals: [ERC20Allowance!] @derivedFrom(field: "balance")

  " Timestamp of the block at which this balance was last modified [unix time] "
  modifiedAt: BigInt!

  " Block number at which this balance was last modified "
  modifiedAtBlock: BigInt!

  " Hash of the transaction that last modified the balance "
  modifiedAtTransaction: Bytes!
}

type ERC20Transfer @entity {
  " Equal to: <tx hash>-<log index> "
  id: ID!

  " Address of the ERC20 token "
  tokenAddress: Bytes!

  " Source address "
  source: Bytes!

  " Destination address "
  destination: Bytes!

  " Amount transferred "
  amount: BigDecimal!

  " Timestamp of the block at which this transfer was created [seconds] "
  createdAt: BigInt!

  " Block number at which this transfer was created "
  createdAtBlock: BigInt!

  " Hash of the transaction that created this transfer "
  createdAtTransaction: Bytes!
}

type ERC20Allowance @entity {
  " Equal to: <tokenAddress>-<allowedAddress>-<approvedAddress> "
  id: ID!

  " Address of the ERC20 token "
  tokenAddress: Bytes!

  " Account that allows others to spend "
  address: Bytes!

  " Balance that can be spent "
  balance: ERC20Balance!

  " Address being approved to spend the balance "
  approvedAddress: Bytes!

  " Current token allowance "
  amount: BigDecimal!

  " Timestamp of the block at which this balance was last modified [unix time] "
  modifiedAt: BigInt!

  " Block number at which this balance was last modified "
  modifiedAtBlock: BigInt!

  " Hash of the transaction that last modified the allowance "
  modifiedAtTransaction: Bytes!
}

# --- Uniswap V2 ---

type UniswapV2Pair @entity {
  " Pair address "
  id: ID!

  " Contract address of the pair "
  address: Bytes!

  " Base token address "
  token0: Bytes!

  " Quote token address "
  token1: Bytes!

  " Base token reserve amount "
  reserve0: BigDecimal!

  " Quote token reserve amount "
  reserve1: BigDecimal!

  " reserve0 / reserve 1 "
  token0Price: BigDecimal!

  " reserve1 / reserve 0 "
  token1Price: BigDecimal!

  " Supply of pool token shares "
  totalSupply: BigDecimal!

  " Timestamp of the block at which the pair was created [unix time] "
  createdAt: BigInt!

  " Block number at which the pair was created "
  createdAtBlock: BigInt!

  " Hash of the transaction that started to create the pair "
  createdAtTransaction: Bytes!

  " Timestamp of the block at which the pair was last modified [unix time] "
  modifiedAt: BigInt

  " Block number at which the pair was last modified "
  modifiedAtBlock: BigInt

  " Hash of the tx that last modified the pair "
  modifiedAtTransaction: Bytes
}

type UniswapV2Swap @entity {
  "<Tx hash>-<Log index>"
  id: ID!

  " Uniswap pair "
  pair: UniswapV2Pair!

  " Address that made the swap "
  sender: Bytes!

  " Amount in token 0 "
  amount0In: BigDecimal!

  " Amount in token 1 "
  amount1In: BigDecimal!

  " Amount out token 0 "
  amount0Out: BigDecimal!

  " Amount out token 1 "
  amount1Out: BigDecimal!

  " Timestamp of the block at which the swap was made [seconds] "
  createdAt: BigInt!

  " Block number at which the swap was made "
  createdAtBlock: BigInt!

  " Hash of the transaction that created the swap "
  createdAtTransaction: Bytes!
}

type UniswapV2Sync @entity {
  " <Tx hash>-<Log index> "
  id: ID!

  " Uniswap reserve of asset 0 "
  reserve0: BigDecimal!

  " Uniswap reserve of asset 1 "
  reserve1: BigDecimal!

  " Uniswap pair "
  pair: UniswapV2Pair!

  " Timestamp of the block at which the sync was made [unix time] "
  createdAt: BigInt!

  " Block number at which the sync was made "
  createdAtBlock: BigInt!

  " Hash of the transaction that executed the sync "
  createdAtTransaction: Bytes!
}

# --- Saviors ---

type SaviorBalance @entity {
  "<saviorAddress>-<safeHandler> "
  id: ID!

  " Smart contract address of the savior "
  saviorAddress: Bytes!

  " balance owner "
  address: Bytes!

  " savior balance in the contract "
  balance: BigDecimal!

  " Timestamp of the block at which the sync was made [unix time] "
  createdAt: BigInt!

  " Block number at which the sync was made "
  createdAtBlock: BigInt!

  " Hash of the transaction that executed the sync "
  createdAtTransaction: Bytes!
}

type SaviorBalanceChange @entity {
  "<tx hash>-<log index> "
  id: ID!

  " Smart contract address of the savior "
  saviorAddress: Bytes!

  " balance owner "
  address: Bytes!

  " savior balance in the contract "
  deltaBalance: BigDecimal!

  " Timestamp of the block at which the sync was made [unix time] "
  createdAt: BigInt!

  " Block number at which the sync was made "
  createdAtBlock: BigInt!

  " Hash of the transaction that executed the sync "
  createdAtTransaction: Bytes!
}

# --- Auctions ---

type EnglishAuctionConfiguration @entity {
  " Collateral type name, 'DEBT' or 'SURPLUS' "
  id: ID!

  " Minimum bid increase (e.g 1.05 means a minimum 5% increase for the next bid compared to the current one) "
  bidIncrease: BigDecimal!

  " How long the auction lasts after a new bid is submitted "
  bidDuration: BigInt

  " Maximum auction length "
  totalAuctionLength: BigInt!
}

type EnglishAuction @entity {
  " Collateral type name or 'DEBT', 'SURPLUS_PRE' or 'SURPLUS_POST'. Equal toL <collateral type>-<auction id> "
  id: ID!

  " Incremental auction id "
  auctionId: BigInt!

  " Whether the auction handles collateral, surplus or debt "
  englishAuctionType: EnglishAuctionType!

  " Token/coin being sold "
  sellToken: AuctionToken!

  " Token/coin being bought "
  buyToken: AuctionToken!

  " Amount of tokens that the system is selling at the start of the auction  "
  sellInitialAmount: BigDecimal!

  " Amount of tokens that the system is buying at the start of the auction  "
  buyInitialAmount: BigDecimal!

  " Amount of tokens that the system is currently selling in the auction "
  sellAmount: BigDecimal!

  " Amount of tokens that that are currently being bought in the auction "
  buyAmount: BigDecimal!

  " Sell price (sellAmount / buyAMount) of the best offer "
  price: BigDecimal

  " Used for collateral auctions only. Threshold of buyToken at which the system starts to decrease the amount sold "
  targetAmount: BigDecimal

  " Auction winner "
  winner: Bytes

  " Address that started the auction "
  startedBy: Bytes!

  " Whether the bought tokens were claimed by the auction winner "
  isClaimed: Boolean!

  " Total number of bids "
  numberOfBids: BigInt!

  " Deadline for the auction after which no more bids can be placed  "
  auctionDeadline: BigInt!

  " List of individual bids "
  englishAuctionBids: [EnglishAuctionBid!] @derivedFrom(field: "auction")

  " Auction configuration "
  englishAuctionConfiguration: EnglishAuctionConfiguration!

  " Timestamp of the block at which the auction started "
  createdAt: BigInt!

  " Block number at which the auction started "
  createdAtBlock: BigInt!

  " Hash of the transaction that started the auction "
  createdAtTransaction: Bytes!
}

type EnglishAuctionBid @entity {
  " Collateral type name or 'DEBT', 'SURPLUS_PRE' or 'SURPLUS_POST'. Equal to: <collateral type>-<auction id>-<bid number> "
  id: ID!

  " Incremental bid id "
  bidNumber: BigInt!

  " Bid type, either increase buy or decrease sell "
  type: EnglishBidType!

  " Auction to which the bid belongs (if it's a bid on a collateral auction) "
  auction: EnglishAuction

  " How many tokens/coins are sold in the auction "
  sellAmount: BigDecimal!

  " How many tokens are being bought from the auction "
  buyAmount: BigDecimal!

  " Price of the asset being sold (sellAmount / buyAmount) "
  price: BigDecimal!

  " Bidder address "
  bidder: Bytes

  " Timestamp of the block at which the liquidation started "
  createdAt: BigInt!

  " Block number at which the liquidation started "
  createdAtBlock: BigInt!

  " Hash of the transaction that started the liquidation "
  createdAtTransaction: Bytes!
}

enum EnglishBidType {
  INCREASE_BUY
  DECREASE_SOLD
}

enum EnglishAuctionType {
  RECYCLING_SURPLUS
}

enum AuctionToken {
  COIN
  PROTOCOL_TOKEN
}
